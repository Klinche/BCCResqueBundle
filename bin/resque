#!/usr/bin/env php
<?php

$QUEUE = getenv('QUEUE');
if (empty($QUEUE)) {
    die("Set QUEUE env var containing the list of queues to work.\n");
}

require_once __DIR__."/../../../../../autoload.php";

$REDIS_BACKEND    = getenv('REDIS_BACKEND');
$REDIS_BACKEND_DB = getenv('REDIS_BACKEND_DB');
if (!empty($REDIS_BACKEND)) {
    if (empty($REDIS_BACKEND_DB)) {
        Resque::setBackend($REDIS_BACKEND);
    } else {
        Resque::setBackend($REDIS_BACKEND, $REDIS_BACKEND_DB);
    }
}

$logLevel = false;
$LOGGING  = getenv('LOGGING');
$VERBOSE  = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if (!empty($LOGGING) || !empty($VERBOSE)) {
    $logLevel = true;
} else if (!empty($VVERBOSE)) {
    $logLevel = true;
}

$APP_INCLUDE = getenv('APP_INCLUDE');
if ($APP_INCLUDE) {
    if (!file_exists($APP_INCLUDE)) {
        die('APP_INCLUDE ('.$APP_INCLUDE.") does not exist.\n");
    }

    require_once $APP_INCLUDE;
}

// See if the APP_INCLUDE containes a logger object,
// If none exists, fallback to internal logger
if (!isset($logger) || !is_object($logger)) {
    $logger = new Resque_Log($logLevel);
}

$BLOCKING = getenv('BLOCKING') !== FALSE;

$interval = 5;
$INTERVAL = getenv('INTERVAL');
if (!empty($INTERVAL)) {
    $interval = $INTERVAL;
}

$count = 1;
$COUNT = getenv('COUNT');
if (!empty($COUNT) && $COUNT > 1) {
    $count = $COUNT;
}

$PREFIX = getenv('PREFIX');
if (!empty($PREFIX)) {
    $logger->log(Psr\Log\LogLevel::INFO, 'Prefix set to {prefix}', array('prefix' => $PREFIX));
    Resque_Redis::prefix($PREFIX);
}

// If set, re-attach failed jobs based on retry_strategy
Resque_Event::listen('onFailure', function(Exception $exception, Resque_Job $job) use ($logger) {
    $args = $job->getArguments();
    $resque = getBCCResqueManager($args);
    $resque->onFailure($exception, $job);
});

// If set, re-attach failed jobs based on retry_strategy
Resque_Event::listen('beforePerform', function(Resque_Job $job) use ($logger) {
    $args = $job->getArguments();
    $resque = getBCCResqueManager($args);
    $resque->beforePerform($job);
});

// If set, re-attach failed jobs based on retry_strategy
Resque_Event::listen('afterPerform', function(Resque_Job $job) use ($logger) {
    $args = $job->getArguments();
    $resque = getBCCResqueManager($args);
    $resque->afterPerform($job);
});




if ($count > 1) {
    for ($i = 0; $i < $count; ++$i) {
        $pid = Resque::fork();
        if ($pid == -1) {
            $logger->log(Psr\Log\LogLevel::EMERGENCY, 'Could not fork worker {count}', array('count' => $i));
            die();
        } else if (!$pid) {
            // Child, start the worker
            $queues = explode(',', $QUEUE);
            $worker = new Resque_Worker($queues);

            $aLogger = new \BCC\ResqueBundle\ResqueDBLogger($logLevel, new \BCC\ResqueBundle\Worker($worker));
            $aLogger->log(Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', array('worker' => $worker));
            $worker->setLogger($aLogger);

            $worker->work($interval, $BLOCKING);
            break;
        }
    }
} else {
    // Start a single worker
    $queues = explode(',', $QUEUE);
    $worker = new Resque_Worker($queues);
    $worker->setLogger($logger);

    $PIDFILE = getenv('PIDFILE');
    if ($PIDFILE) {
        file_put_contents($PIDFILE, getmypid()) or
            die('Could not write PID information to ' . $PIDFILE);
    }

    $aLogger = new \BCC\ResqueBundle\ResqueDBLogger($logLevel, new \BCC\ResqueBundle\Worker($worker));
    $aLogger->log(Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', array('worker' => $worker));
    $worker->setLogger($aLogger);

    $worker->work($interval, $BLOCKING);
}

/**
 * @return KernelInterface
 */
function createKernel($args)
{
    $finder = new Symfony\Component\Finder\Finder();
    $finder->name('*Kernel.php')->depth(0)->in($args['kernel.root_dir']);
    $results = iterator_to_array($finder);
    $file = current($results);
    $class = $file->getBasename('.php');

    require_once $file;

    return new $class(
        isset($args['kernel.environment']) ? $args['kernel.environment'] : 'dev',
        isset($args['kernel.debug']) ? $args['kernel.debug'] : true
    );
}

/**
 * @param $args
 * @return \BCC\ResqueBundle\Resque
 */
function getBCCResqueManager($args) {

    $kernel = null;

    if ($kernel === null) {
        $kernel = createKernel($args);
        $kernel->boot();
    }

    return $kernel->getContainer()->get('bcc_resque.resque');
}
